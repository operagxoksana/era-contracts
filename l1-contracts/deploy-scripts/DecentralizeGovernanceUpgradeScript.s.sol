// SPDX-License-Identifier: MIT
pragma solidity 0.8.24;

import {Script} from "forge-std/Script.sol";

import {Diamond} from 'contracts/state-transition/libraries/Diamond.sol';
import {ProxyAdmin} from "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol";
import {ITransparentUpgradeableProxy} from "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol";
import {Governance} from "contracts/governance/Governance.sol";
import {AdminFacet} from "contracts/state-transition/chain-deps/facets/Admin.sol";
import {ChainAdmin} from "contracts/governance/ChainAdmin.sol";
import {IStateTransitionManager} from "contracts/state-transition/IStateTransitionManager.sol";
import {Utils} from "./Utils.sol";
import {IChainAdmin} from "contracts/governance/IChainAdmin.sol";
import {IZkSyncHyperchain} from "contracts/state-transition/chain-interfaces/IZkSyncHyperchain.sol";
import "forge-std/console.sol";

contract DecentralizeGovernanceUpgradeScript is Script {
    function upgradeSTM(
        ProxyAdmin _proxyAdmin,
        ITransparentUpgradeableProxy _stmProxy,
        Governance _governance,
        address _newStmImpl
    ) public {
        require(_proxyAdmin.getProxyAdmin(_stmProxy) == address(_proxyAdmin));
        require(_proxyAdmin.owner() == address(_governance));

        bytes memory proxyAdminUpgradeData = abi.encodeCall(ProxyAdmin.upgrade, (_stmProxy, _newStmImpl));

        Utils.executeUpgrade({
            _governor: address(_governance),
            _salt: bytes32(0),
            _target: address(_proxyAdmin),
            _data: proxyAdminUpgradeData,
            _value: 0,
            _delay: 0
        });
    }

    function setPendingAdmin(address _target, Governance _governance, address _pendingAdmin) public {
        bytes memory upgradeData = abi.encodeCall(IStateTransitionManager.setPendingAdmin, (_pendingAdmin));
        vm.startBroadcast();
        Utils.executeUpgrade({
            _governor: address(_governance),
            _salt: bytes32(0),
            _target: _target,
            _data: upgradeData,
            _value: 0,
            _delay: 0
        });
        vm.stopBroadcast();
    }

    // This function should be called by the owner to accept the admin role
    function chainAdminAcceptAdmin(ChainAdmin chainAdmin, address target) public {
        IZkSyncHyperchain adminContract = IZkSyncHyperchain(target);

        IChainAdmin.Call[] memory calls = new IChainAdmin.Call[](1);
        calls[0] = IChainAdmin.Call({target: target, value: 0, data: abi.encodeCall(adminContract.acceptAdmin, ())});

        vm.startBroadcast();
        chainAdmin.multicall(calls, true);
        vm.stopBroadcast();
    }

    // This function should be called by the owner to accept the admin role
    function chainAdminSetUpgradeDiamondCut(Governance _governance, address stm, Diamond.DiamondCutData memory dCut, uint256 _oldProtocolVersion) public {
        IStateTransitionManager stmContract = IStateTransitionManager(stm);
//        console.logAddress(dCut.initAddress);
//        console.logBytes(dCut.initCalldata);

        bytes memory setCutData = abi.encodeCall(stmContract.setUpgradeDiamondCut, (dCut, _oldProtocolVersion));
        Utils.executeUpgrade({
            _governor: address(_governance),
            _salt: bytes32(0),
            _target: stm,
            _data: setCutData,
            _value: 0,
            _delay: 0
        });
    }

    function chainAdminSetUpgradeTimestamp(ChainAdmin chainAdmin, uint256 protocolVersion, uint256 upgradeTimestamp) public {
        vm.startBroadcast();
        chainAdmin.setUpgradeTimestamp(protocolVersion, upgradeTimestamp);
        vm.stopBroadcast();
    }

    function run() public {
        setPendingAdmin(
            address(0x9CfF734c0529e89e2294B592d9f4D310754EC8CA),
            Governance(payable(address(0x1B60b551647e2b762cd705127414465699E27530))),
            address(0x94eeC647feb5b8AD821A3Be21D0feb572b58957B)
        );

        chainAdminAcceptAdmin(
            ChainAdmin(payable(address(0x94eeC647feb5b8AD821A3Be21D0feb572b58957B))),
            address(0x9CfF734c0529e89e2294B592d9f4D310754EC8CA)
        );

        chainAdminSetUpgradeTimestamp(
            ChainAdmin(payable(address(0x94eeC647feb5b8AD821A3Be21D0feb572b58957B))),
            0x0000000000000000000000000000000000000000000000000000001800000002,
            0x66D1B440
        );

        vm.startPrank(0xd669494442609879b209CcA8eba2BdC904D2E69D);
        chainAdminSetUpgradeDiamondCut(
            Governance(payable(address(0xEE73438083629026FAfA1f5F5bBE2bBD6Bad6331))), // stm owner (governance)
            address(0x8b448ac7cd0f18F3d8464E2645575772a26A3b6b), //stm
            abi.decode(hex"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000f08528979aedd80cc2cf8d1ba9396790909ed7b100000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050408284e5700000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000048000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004a000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000669123fa000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000002eiamond.DiamondCutData)),
            103079215104
        );
        vm.stopPrank();

        IStateTransitionManager stmContract = IStateTransitionManager(address(0x8b448ac7cd0f18F3d8464E2645575772a26A3b6b));
        bytes32 cut1 = stmContract.upgradeCutHash(103079215104);
        bytes32 cut2 = stmContract.upgradeCutHash(103079215105);
//        console.logBytes32(cut1);
//        console.logBytes32(cut2);

        AdminFacet adminMock = new AdminFacet();
        vm.etch(0x96b40174102c93155cdB46a5E4691EEB6c4e1B7B, address(adminMock).code);

        vm.startBroadcast();
        address to = 0x94eeC647feb5b8AD821A3Be21D0feb572b58957B;
//        bytes32 cutHashInput = keccak256(hex"");
//        console.logBytes32(cutHashInput);

//        (IChainAdmin.Call[] memory calls, bool q) = abi.decode(hex"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000009cff734c0529e89e2294b592d9f4d310754ec8ca000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000604fc57565f000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000f08528979aedd80cc2cf8d1ba9396790909ed7b100000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050408284e5700000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000048000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004a000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000669123fa000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000002ehainAdmin.Call[], bool));
//        console.logUint(calls.length);
//        console.logBool(q);
//        console.logAddress(calls[0].target);
//        console.logUint(calls[0].value);
//        console.logBytes(calls[0].data);
        to.call{value: 0}(hex"69340beb00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000009cff734c0529e89e2294b592d9f4d310754ec8ca000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000604fc57565f000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000f08528979aedd80cc2cf8d1ba9396790909ed7b100000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050408284e5700000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000048000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004a000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000669123fa000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000002e
        vm.stopBroadcast();
    }
}
